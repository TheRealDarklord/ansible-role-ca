---
# tasks file for ca
# - name: include assert.yml
#   include_tasks: assert.yml

# init
- name: set path for root CA
  set_fact:
    ca_path: "{{ ca_openssl_path }}/{{ ca_common_name }}/rootCA"
    ca_filename: rootCA
  when:
    - ca_init
    - ca_own_root

- name: init root CA
  include_tasks: init_ca.yml
  when:
    - ca_init
    - ca_own_root

- name: set path for CA
  set_fact:
    ca_path: "{{ ca_openssl_path }}/{{ ca_common_name }}"
    ca_filename: ca

- name: init CA
  include_tasks: init_ca.yml
  when: ca_init

- name: generate ca certificates
  include_tasks: generate_ca_certs.yml
  when:
    - ca_init
    - ca_own_root

# certificate requests
- name: upload requested key
  copy:
    src: "{{ item.upload_keyfile }}"
    dest: "{{ ca_path }}/{{ ca_subject_keys_path }}/{{ item.name | default(item) }}.pem"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined
    - item.upload_keyfile is defined

- name: copy requested key
  copy:
    remote_src: yes
    src: "{{ item.keyfile_path }}"
    dest: "{{ ca_path }}/{{ ca_subject_keys_path }}/{{ item.name | default(item) }}.pem"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined
    - item.keyfile_path is defined

- name: generate requested key
  openssl_privatekey:
    path: "{{ ca_path }}/{{ ca_subject_keys_path }}/{{ item.name | default(item) }}.pem"
    passphrase: "{{ item.passphrase | default(omit) }}"
    cipher: "{{ item.cipher | default(omit) }}"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined
    - item.upload_keyfile is not defined
    - item.keyfile_path is not defined

- name: generate requested certificate signing request
  openssl_csr:
    path: "{{ ca_path }}/{{ ca_requests_path }}/{{ item.name | default(item) }}.csr"
    privatekey_path: "{{ ca_path }}/{{ ca_subject_keys_path }}/{{ item.name | default(item) }}.pem"
    privatekey_passphrase: "{{ item.passphrase | default(omit) }}"
    common_name: "{{ item.name | default(item) }}"
    country_name: "{{ item.country_name | default(omit) }}"
    email_address: "{{ item.email_address | default(omit) }}"
    organization_name: "{{ item.organization_name | default(omit) }}"
    organizational_unit_name: "{{ item.organizational_unit_name | default(omit) }}"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: generate requested certificate extension file
  template:
    src: extensions.cnf.j2
    dest: "{{ ca_path }}/{{ ca_extfiles_path }}/{{ item.name }}.cnf"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: generate requested certificate
  command:
    chdir: "{{ ca_path }}"
    cmd: "openssl ca {{ ca_client_cert_params }}"
    creates: "{{ ca_path }}/{{ ca_certs_path }}/{{ item.name }}.crt"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: ensure publication location exists
  file:
    path: "{{ ca_publication_location }}"
    state: directory
    mode: "755"
    owner: root
    group: root
  when:
    - ca_publication_location is defined

- name: publish certificate
  copy:
    src: "{{ ca_path }}/{{ ca_certs_path }}/{{ item.name | default(item) }}.crt"
    dest: "{{ ca_publication_location }}/{{ item.name | default(item) }}.crt"
    mode: "644"
    remote_src: yes
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined
    - ca_publication_location is defined
