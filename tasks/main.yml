---
# tasks file for ca
- name: include assert.yml
  include_tasks: assert.yml

- name: ensure openssl_path exists
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ ca_openssl_path }}/{{ ca_private_path }}"
    - "{{ ca_openssl_path }}/{{ ca_certs_path }}"

- name: generate ca key
  openssl_privatekey:
    path: "{{ ca_openssl_path }}/{{ ca_privatekey_path }}"
    passphrase: "{{ ca_passphrase }}"
    cipher: aes256

- name: generate ca certificate signing request
  openssl_csr:
    path: "{{ ca_openssl_path }}/{{ ca_csr_path }}"
    privatekey_path: "{{ ca_openssl_path }}/{{ ca_privatekey_path }}"
    privatekey_passphrase: "{{ ca_passphrase }}"
    common_name: "{{ ca_common_name }}"
    country_name: "{{ ca_country_name | default(omit) }}"
    email_address: "{{ ca_email_address | default(omit) }}"
    organization_name: "{{ ca_organization_name | default(omit) }}"
    organizational_unit_name: "{{ ca_organizational_unit_name | default(omit) }}"
    state_or_province_name: "{{ ca_state_or_province_name | default(omit) }}"

- name: generate ca certificate
  openssl_certificate:
    path: "{{ ca_openssl_path }}/{{ ca_certificate_path }}"
    privatekey_path: "{{ ca_openssl_path }}/{{ ca_privatekey_path }}"
    privatekey_passphrase: "{{ ca_passphrase }}"
    csr_path: "{{ ca_openssl_path }}/{{ ca_csr_path }}"
    provider: selfsigned

- name: generate requested key
  openssl_privatekey:
    path: "{{ ca_openssl_path }}/{{ ca_private_path }}/{{ item.name | default(item) }}.pem"
    passphrase: "{{ item.passphrase | default(omit) }}"
    cipher: "{{ item.cipher | default(omit) }}"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: generate requested certificate signing request
  openssl_csr:
    path: "{{ ca_openssl_path }}/{{ item.name | default(item) }}.csr"
    privatekey_path: "{{ ca_openssl_path }}/{{ ca_private_path }}/{{ item.name | default(item) }}.pem"
    privatekey_passphrase: "{{ item.passphrase | default(omit) }}"
    common_name: "{{ item.name | default(item) }}"
    country_name: "{{ item.country_name | default(omit) }}"
    email_address: "{{ item.email_address | default(omit) }}"
    organization_name: "{{ item.organization_name | default(omit) }}"
    organizational_unit_name: "{{ item.organizational_unit_name | default(omit) }}"
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: generate certificate
  openssl_certificate:
    privatekey_path: "{{ ca_openssl_path }}/{{ ca_private_path }}/{{ item.name | default(item) }}.pem"
    path: "{{ ca_openssl_path }}/{{ ca_certs_path }}/{{ item.name | default(item) }}.crt"
    csr_path: "{{ ca_openssl_path }}/{{ item.name | default(item) }}.csr"
    privatekey_passphrase: "{{ item.passphrase | default(omit) }}"
    provider: selfsigned
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined

- name: ensure publication location exists
  file:
    path: "{{ ca_publication_location }}"
    state: directory
    mode: "755"
    owner: root
    group: root
  when:
    - ca_publication_location is defined

- name: publish certificate
  copy:
    src: "{{ ca_openssl_path }}/{{ ca_certs_path }}/{{ item.name | default(item) }}.crt"
    dest: "{{ ca_publication_location }}/{{ item.name | default(item) }}.crt"
    mode: "644"
    remote_src: yes
  loop: "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name | default(item) }}"
  when:
    - ca_requests is defined
    - ca_publication_location is defined
