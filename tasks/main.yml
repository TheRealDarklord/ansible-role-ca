---
# tasks file for ca
- name: test veriables and environment
  assert:
    that:
      - ca_passphrase is defined
      - ca_common_name is defined
      - ca_publication_location is defined
      - ca_package_state == "present" or
        ca_package_state == "absent" or
        ca_package_state == "latest"
      - ca_ignore_docker is defined
      - ca_ignore_docker or
        not ca_ignore_docker
      - ca_packages is defined
      - ca_openssl_path is defined

- name: install requirements
  pip:
    name: pyopenssl
    state: "{{ ca_package_state }}"
  register: ca_install_requirements
  until: ca_install_requirements is succeeded
  retries: 3

- name: install openssl
  package:
    name: "{{ ca_packages }}"
    state: "{{ ca_package_state }}"
  register: ca_install_openssl
  until: ca_install_openssl is succeeded
  retries: 3

- name: generate ca key
  openssl_privatekey:
    path: "{{ ca_openssl_path }}/private/ca.pem"
    passphrase: "{{ ca_passphrase }}"
    cipher: aes256

- name: generate ca certificate signing request
  openssl_csr:
    path: "{{ ca_openssl_path }}/ca.csr"
    privatekey_path: "{{ ca_openssl_path }}/private/ca.pem"
    privatekey_passphrase: "{{ ca_passphrase }}"
    common_name: "{{ ca_common_name }}"
    country_name: "{{ ca_country_name | default(omit) }}"
    email_address: "{{ ca_email_address | default(omit) }}"
    organization_name: "{{ ca_organization_name | default(omit) }}"
    organizational_unit_name: "{{ ca_organizational_unit_name | default(omit) }}"
    state_or_province_name: "{{ ca_state_or_province_name | default(omit) }}"

- name: generate ca certificate
  openssl_certificate:
    path: "{{ ca_openssl_path }}/certs/ca.crt"
    privatekey_path: "{{ ca_openssl_path }}/private/ca.pem"
    privatekey_passphrase: "{{ ca_passphrase }}"
    csr_path: "{{ ca_openssl_path }}/ca.csr"
    provider: selfsigned

- name: generate requested key
  openssl_privatekey:
    path: "{{ ca_openssl_path }}/private/{{ item.name }}.pem"
    passphrase: "{{ item.passphrase }}"
    cipher: aes256
  with_items:
    - "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - ca_requests is defined

- name: generate requested certificate signing request
  openssl_csr:
    path: "{{ ca_openssl_path }}/{{ item.name }}.csr"
    privatekey_path: "{{ ca_openssl_path }}/private/{{ item.name }}.pem"
    privatekey_passphrase: "{{ item.passphrase | default(omit) }}"
    common_name: "{{ item.name }}"
    country_name: "{{ item.country_name | default(omit) }}"
    email_address: "{{ item.email_address | default(omit) }}"
    organization_name: "{{ item.organization_name | default(omit) }}"
    organizational_unit_name: "{{ item.organizational_unit_name | default(omit) }}"
  with_items:
    - "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - ca_requests is defined

- name: generate certificate
  openssl_certificate:
    privatekey_path: "{{ ca_openssl_path }}/private/{{ item.name }}.pem"
    path: "{{ ca_openssl_path }}/certs/{{ item.name }}.crt"
    csr_path: "{{ ca_openssl_path }}/{{ item.name }}.csr"
    privatekey_passphrase: "{{ item.passphrase | default(omit) }}"
    provider: selfsigned
  with_items:
    - "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - ca_requests is defined

- name: ensure publication location exists
  file:
    path: "{{ ca_publication_location }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  when:
    - ca_publication_location is defined

- name: publish certificate
  copy:
    src: "{{ ca_openssl_path }}/certs/{{ item.name }}.crt"
    dest: "{{ ca_publication_location }}/{{ item.name }}.crt"
    mode: "0644"
    remote_src: yes
  with_items:
    - "{{ ca_requests }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - ca_requests is defined
    - ca_publication_location is defined
